/*----- PROTECTED REGION ID(DynaTestClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        DynaTestClass.h
//
// description : Include for the DynaTest root class.
//               This class is the singleton class for
//                the DynaTest device class.
//               It contains all properties and methods which the 
//               DynaTest requires only once e.g. the commands.
//
// project :     DynaTest
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef DynaTestClass_H
#define DynaTestClass_H

#include <tango/tango.h>
#include <DynaTest.h>


/*----- PROTECTED REGION END -----*/	//	DynaTestClass.h


namespace DynaTest_ns
{
/*----- PROTECTED REGION ID(DynaTestClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	DynaTestClass::classes for dynamic creation

//=========================================
//	Define classes for dynamic attributes
//=========================================
//	Attribute DynDoubleRO class definition
class DynDoubleROAttrib: public Tango::Attr
{
public:
	DynDoubleROAttrib(const std::string &att_name):Attr(att_name.c_str(),
			Tango::DEV_DOUBLE, Tango::READ) {}
	~DynDoubleROAttrib() {}
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<DynaTest *>(dev))->read_DynDoubleRO(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<DynaTest *>(dev))->is_DynDoubleRO_allowed(ty);}
};

//	Attribute DynDoubleRW class definition
class DynDoubleRWAttrib: public Tango::Attr
{
public:
	DynDoubleRWAttrib(const std::string &att_name):Attr(att_name.c_str(),
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {}
	~DynDoubleRWAttrib() {}
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<DynaTest *>(dev))->read_DynDoubleRW(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<DynaTest *>(dev))->write_DynDoubleRW(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<DynaTest *>(dev))->is_DynDoubleRW_allowed(ty);}
};

//	Attribute DynLongRO class definition
class DynLongROAttrib: public Tango::Attr
{
public:
	DynLongROAttrib(const std::string &att_name):Attr(att_name.c_str(),
			Tango::DEV_LONG, Tango::READ) {}
	~DynLongROAttrib() {}
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<DynaTest *>(dev))->read_DynLongRO(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<DynaTest *>(dev))->is_DynLongRO_allowed(ty);}
};

//	Attribute DynLongRW class definition
class DynLongRWAttrib: public Tango::Attr
{
public:
	DynLongRWAttrib(const std::string &att_name):Attr(att_name.c_str(),
			Tango::DEV_LONG, Tango::READ_WRITE) {}
	~DynLongRWAttrib() {}
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<DynaTest *>(dev))->read_DynLongRW(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<DynaTest *>(dev))->write_DynLongRW(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<DynaTest *>(dev))->is_DynLongRW_allowed(ty);}
};


/**
 *	The DynaTestClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  DynaTestClass : public Tango::DeviceClass
#else
class DynaTestClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(DynaTestClass::Additional DServer data members) ENABLED START -----*/
	/* clang-format on */
	//	Add your own code
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	DynaTestClass::Additional DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
		//	Method prototypes
		static DynaTestClass *init(const char *);
		static DynaTestClass *instance();
		~DynaTestClass();
		Tango::DbDatum	get_class_property(std::string &);
		Tango::DbDatum	get_default_device_property(std::string &);
		Tango::DbDatum	get_default_class_property(std::string &);

	protected:
		DynaTestClass(std::string &);
		static DynaTestClass *_instance;
		void command_factory();
		void attribute_factory(std::vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		std::string get_cvstag();
		std::string get_cvsroot();

	private:
		void device_factory(TANGO_UNUSED(const Tango::DevVarStringArray *));
		void create_static_attribute_list(std::vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,std::vector<Tango::Attr *> &);
		std::vector<std::string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(std::vector<Tango::Attr *> &att_list, std::string attname);
};

}	//	End of namespace

#endif   //	DynaTest_H
