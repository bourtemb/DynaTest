/*----- PROTECTED REGION ID(DynaTest.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        DynaTest.cpp
//
// description : C++ source for the DynaTest class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               DynaTest are implemented in this file.
//
// project :     DynaTest
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <DynaTest.h>
#include <DynaTestClass.h>

/*----- PROTECTED REGION END -----*/	//	DynaTest.cpp

/**
 *  DynaTest class description:
 *    Test Class to test dynamic attributes limitations
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//================================================================

//================================================================
//  Attributes managed is:
//================================================================
//================================================================

namespace DynaTest_ns
{
/*----- PROTECTED REGION ID(DynaTest::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	DynaTest::namespace_starting

//--------------------------------------------------------
/**
 *	Method     : DynaTest::DynaTest()
 *	Description: Constructors for a Tango device
 *                implementing the classDynaTest
 */
//--------------------------------------------------------
DynaTest::DynaTest(Tango::DeviceClass *cl, std::string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(DynaTest::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	DynaTest::constructor_1
}
//--------------------------------------------------------
DynaTest::DynaTest(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(DynaTest::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	DynaTest::constructor_2
}
//--------------------------------------------------------
DynaTest::DynaTest(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(DynaTest::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	DynaTest::constructor_3
}
//--------------------------------------------------------
DynaTest::~DynaTest()
{
	delete_device();
}

//--------------------------------------------------------
/**
 *	Method     : DynaTest::delete_device()
 *	Description: will be called at device destruction or at init command
 */
//--------------------------------------------------------
void DynaTest::delete_device()
{
	DEBUG_STREAM << "DynaTest::delete_device() " << device_name << std::endl;
	/*----- PROTECTED REGION ID(DynaTest::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	
	/*----- PROTECTED REGION END -----*/	//	DynaTest::delete_device
}

//--------------------------------------------------------
/**
 *	Method     : DynaTest::init_device()
 *	Description: will be called at device initialization.
 */
//--------------------------------------------------------
void DynaTest::init_device()
{
	DEBUG_STREAM << "DynaTest::init_device() create device " << device_name << std::endl;
	/*----- PROTECTED REGION ID(DynaTest::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	DynaTest::init_device_before


	//	Get the device properties from database
	get_device_property();

	/*----- PROTECTED REGION ID(DynaTest::init_device) ENABLED START -----*/
	
	//	Initialize device
	
	/*----- PROTECTED REGION END -----*/	//	DynaTest::init_device
}

//--------------------------------------------------------
/**
 *	Method     : DynaTest::get_device_property()
 *	Description: Read database to initialize property data members.
 */
//--------------------------------------------------------
void DynaTest::get_device_property()
{
	/*----- PROTECTED REGION ID(DynaTest::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	DynaTest::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("DynDoubleROAttrNames"));
	dev_prop.push_back(Tango::DbDatum("DynDoubleRWAttrNames"));
	dev_prop.push_back(Tango::DbDatum("DynLongRWAttrNames"));
	dev_prop.push_back(Tango::DbDatum("DynLongROAttrNames"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);

		//	get instance on DynaTestClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		DynaTestClass	*ds_class =
			(static_cast<DynaTestClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize DynDoubleROAttrNames from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  dynDoubleROAttrNames;
		else {
			//	Try to initialize DynDoubleROAttrNames from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  dynDoubleROAttrNames;
		}
		//	And try to extract DynDoubleROAttrNames value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  dynDoubleROAttrNames;

		//	Try to initialize DynDoubleRWAttrNames from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  dynDoubleRWAttrNames;
		else {
			//	Try to initialize DynDoubleRWAttrNames from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  dynDoubleRWAttrNames;
		}
		//	And try to extract DynDoubleRWAttrNames value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  dynDoubleRWAttrNames;

		//	Try to initialize DynLongRWAttrNames from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  dynLongRWAttrNames;
		else {
			//	Try to initialize DynLongRWAttrNames from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  dynLongRWAttrNames;
		}
		//	And try to extract DynLongRWAttrNames value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  dynLongRWAttrNames;

		//	Try to initialize DynLongROAttrNames from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  dynLongROAttrNames;
		else {
			//	Try to initialize DynLongROAttrNames from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  dynLongROAttrNames;
		}
		//	And try to extract DynLongROAttrNames value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  dynLongROAttrNames;

	}

	/*----- PROTECTED REGION ID(DynaTest::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	DynaTest::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method     : DynaTest::always_executed_hook()
 *	Description: method always executed before any command is executed
 */
//--------------------------------------------------------
void DynaTest::always_executed_hook()
{
	DEBUG_STREAM << "DynaTest::always_executed_hook()  " << device_name << std::endl;
	/*----- PROTECTED REGION ID(DynaTest::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	DynaTest::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method     : DynaTest::read_attr_hardware()
 *	Description: Hardware acquisition for attributes
 */
//--------------------------------------------------------
void DynaTest::read_attr_hardware(TANGO_UNUSED(std::vector<long> &attr_list))
{
	DEBUG_STREAM << "DynaTest::read_attr_hardware(std::vector<long> &attr_list) entering... " << std::endl;
	/*----- PROTECTED REGION ID(DynaTest::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	DynaTest::read_attr_hardware
}


//--------------------------------------------------------
/**
 *	Read attribute DynDoubleRO related method
 *
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void DynaTest::read_DynDoubleRO(Tango::Attribute &attr)
{
	DEBUG_STREAM << "DynaTest::read_DynDoubleRO(Tango::Attribute &attr) entering... " << std::endl;
	Tango::DevDouble	*att_value = get_DynDoubleRO_data_ptr(attr.get_name());
	/*----- PROTECTED REGION ID(DynaTest::read_DynDoubleRO) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(att_value);
	
	/*----- PROTECTED REGION END -----*/	//	DynaTest::read_DynDoubleRO
}
//--------------------------------------------------------
/**
 *	Read attribute DynDoubleRW related method
 *
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void DynaTest::read_DynDoubleRW(Tango::Attribute &attr)
{
	DEBUG_STREAM << "DynaTest::read_DynDoubleRW(Tango::Attribute &attr) entering... " << std::endl;
	Tango::DevDouble	*att_value = get_DynDoubleRW_data_ptr(attr.get_name());
	/*----- PROTECTED REGION ID(DynaTest::read_DynDoubleRW) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(att_value);
	
	/*----- PROTECTED REGION END -----*/	//	DynaTest::read_DynDoubleRW
}
//--------------------------------------------------------
/**
 *	Write attribute DynDoubleRW related method
 *
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void DynaTest::write_DynDoubleRW(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "DynaTest::write_DynDoubleRW(Tango::WAttribute &attr) entering... " << std::endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(DynaTest::write_DynDoubleRW) ENABLED START -----*/
	Tango::DevDouble	*att_value = get_DynDoubleRW_data_ptr(attr.get_name());
	*att_value = w_val;
	
	/*----- PROTECTED REGION END -----*/	//	DynaTest::write_DynDoubleRW
}
//--------------------------------------------------------
/**
 *	Read attribute DynLongRO related method
 *
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void DynaTest::read_DynLongRO(Tango::Attribute &attr)
{
	DEBUG_STREAM << "DynaTest::read_DynLongRO(Tango::Attribute &attr) entering... " << std::endl;
	Tango::DevLong	*att_value = get_DynLongRO_data_ptr(attr.get_name());
	/*----- PROTECTED REGION ID(DynaTest::read_DynLongRO) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(att_value);
	
	/*----- PROTECTED REGION END -----*/	//	DynaTest::read_DynLongRO
}
//--------------------------------------------------------
/**
 *	Read attribute DynLongRW related method
 *
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void DynaTest::read_DynLongRW(Tango::Attribute &attr)
{
	DEBUG_STREAM << "DynaTest::read_DynLongRW(Tango::Attribute &attr) entering... " << std::endl;
	Tango::DevLong	*att_value = get_DynLongRW_data_ptr(attr.get_name());
	/*----- PROTECTED REGION ID(DynaTest::read_DynLongRW) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(att_value);
	
	/*----- PROTECTED REGION END -----*/	//	DynaTest::read_DynLongRW
}
//--------------------------------------------------------
/**
 *	Write attribute DynLongRW related method
 *
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void DynaTest::write_DynLongRW(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "DynaTest::write_DynLongRW(Tango::WAttribute &attr) entering... " << std::endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(DynaTest::write_DynLongRW) ENABLED START -----*/
	Tango::DevLong	*att_value = get_DynLongRW_data_ptr(attr.get_name());
	*att_value = w_val;
	
	/*----- PROTECTED REGION END -----*/	//	DynaTest::write_DynLongRW
}
//--------------------------------------------------------
/**
 *	Method     : DynaTest::add_dynamic_attributes()
 *	Description: Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void DynaTest::add_dynamic_attributes()
{
	//	Example to add dynamic attribute:
	//	Copy inside the following protected area to create instance(s) at startup.
	//	add_DynDoubleRO_dynamic_attribute("MyDynDoubleROAttribute");
	//	add_DynDoubleRW_dynamic_attribute("MyDynDoubleRWAttribute");
	//	add_DynLongRO_dynamic_attribute("MyDynLongROAttribute");
	//	add_DynLongRW_dynamic_attribute("MyDynLongRWAttribute");

	/*----- PROTECTED REGION ID(DynaTest::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	for(auto attr_name:  dynDoubleROAttrNames)
	{
		INFO_STREAM << device_name << ":Adding " << attr_name << " Double RO dynamic attribute" << std::endl; 
		try
		{
			add_DynDoubleRO_dynamic_attribute(attr_name);
		}
		catch(const Tango::DevFailed &e)
		{
			Tango::Except::print_exception(e);
		}
	}
	for(auto attr_name:  dynDoubleRWAttrNames)
	{
		INFO_STREAM << device_name << ":Adding " << attr_name << " Double RW dynamic attribute" << std::endl; 
		try
		{
			add_DynDoubleRW_dynamic_attribute(attr_name);
		}
		catch(const Tango::DevFailed &e)
		{
			Tango::Except::print_exception(e);
		}
	}
	for(auto attr_name:  dynLongROAttrNames)
	{
		INFO_STREAM << device_name << ":Adding " << attr_name << " Long RO dynamic attribute" << std::endl; 
		try
		{
			add_DynLongRO_dynamic_attribute(attr_name);
		}
		catch(const Tango::DevFailed &e)
		{
			Tango::Except::print_exception(e);
		}
	}
	for(auto attr_name:  dynLongRWAttrNames)
	{
		INFO_STREAM << device_name << "Adding " << attr_name << " Long RW dynamic attribute" << std::endl; 
		try
		{
			add_DynLongRW_dynamic_attribute(attr_name);
		}
		catch(const Tango::DevFailed &e)
		{
			Tango::Except::print_exception(e);
		}
	}
	add_DynLongRO_dynamic_attribute("MyDynLongROAttribute");
	add_DynLongRW_dynamic_attribute("MyDynLongRWAttribute");
	
	/*----- PROTECTED REGION END -----*/	//	DynaTest::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method     : DynaTest::add_dynamic_commands()
 *	Description: Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void DynaTest::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(DynaTest::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	DynaTest::add_dynamic_commands
}

/*----- PROTECTED REGION ID(DynaTest::namespace_ending) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	DynaTest::namespace_ending
} //	namespace
